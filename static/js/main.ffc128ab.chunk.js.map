{"version":3,"sources":["Home/Home.jsx","About/particlesjs-config.js","About/About.jsx","Contact/Contact.jsx","NavBar/NavBar.jsx","App.js","serviceWorker.js","index.js"],"names":["Home","react_default","a","createElement","config","particles","number","value","density","enable","value_area","color","shape","type","stroke","width","polygon","nb_sides","image","src","height","opacity","random","anim","speed","opacity_min","sync","size","size_min","line_linked","distance","move","direction","straight","out_mode","bounce","attract","rotateX","rotateY","interactivity","detect_on","events","onhover","mode","onclick","resize","modes","grab","bubble","duration","repulse","push","particles_nb","remove","retina_detect","About","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","script","document","async","body","appendChild","console","log","particles_default","className","canvasClassName","params","React","Component","Contact","NavBar","Link","to","App","BrowserRouter","NavBar_NavBar","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ffc128ab.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport function Home() {\r\n  return (\r\n    <div>\r\n      <h2>Home</h2>\r\n    </div>\r\n  );\r\n}\r\n","export const config = {\n  particles: {\n    number: {\n      value: 540,\n      density: {\n        enable: true,\n        value_area: 1420.4657549380909\n      }\n    },\n    color: {\n      value: '#874848'\n    },\n    shape: {\n      type: 'circle',\n      stroke: {\n        width: 0,\n        color: '#d76b6b'\n      },\n      polygon: {\n        nb_sides: 3\n      },\n      image: {\n        src: 'img/github.svg',\n        width: 100,\n        height: 100\n      }\n    },\n    opacity: {\n      value: 1,\n      random: true,\n      anim: {\n        enable: true,\n        speed: 1,\n        opacity_min: 0,\n        sync: false\n      }\n    },\n    size: {\n      value: 3,\n      random: true,\n      anim: {\n        enable: false,\n        speed: 4,\n        size_min: 0.3,\n        sync: false\n      }\n    },\n    line_linked: {\n      enable: false,\n      distance: 150,\n      color: '#643e3e',\n      opacity: 0.1736124811591,\n      width: 0.4734885849793636\n    },\n    move: {\n      enable: true,\n      speed: 1,\n      direction: 'none',\n      random: true,\n      straight: false,\n      out_mode: 'out',\n      bounce: false,\n      attract: {\n        enable: false,\n        rotateX: 631.3181133058181,\n        rotateY: 600\n      }\n    }\n  },\n  interactivity: {\n    detect_on: 'canvas',\n    events: {\n      onhover: {\n        enable: true,\n        mode: 'grab'\n      },\n      onclick: {\n        enable: true,\n        mode: 'repulse'\n      },\n      resize: true\n    },\n    modes: {\n      grab: {\n        distance: 400,\n        line_linked: {\n          opacity: 1\n        }\n      },\n      bubble: {\n        distance: 250,\n        size: 0,\n        duration: 2,\n        opacity: 0,\n        speed: 3\n      },\n      repulse: {\n        distance: 400,\n        duration: 0.4\n      },\n      push: {\n        particles_nb: 4\n      },\n      remove: {\n        particles_nb: 2\n      }\n    }\n  },\n  retina_detect: true\n};\n","import Particles from 'react-particles-js';\r\nimport React from 'react';\r\nimport './About.css';\r\nimport { config } from './particlesjs-config';\r\n\r\nexport class About extends React.Component {\r\n  componentDidMount() {\r\n    const script = document.createElement('script');\r\n\r\n    script.src = 'https://cdn.rawgit.com/progers/pathseg/master/pathseg.js';\r\n    script.async = true;\r\n\r\n    document.body.appendChild(script);\r\n    console.log('did mant');\r\n  }\r\n  render() {\r\n    return (\r\n      <Particles\r\n        className=\"aa\"\r\n        canvasClassName=\"canvasClassName\"\r\n        params={config}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nexport function Contact() {\r\n  return (\r\n    <div>\r\n      <h2>Contact</h2>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './NavBar.css';\r\n\r\nexport function NavBar() {\r\n  return (\r\n    <div className=\"navbar\">\r\n      <Link to=\"/\">Home</Link>\r\n      <Link to=\"/about\">About</Link>\r\n      <Link to=\"/contact\">Contact</Link>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { Home } from './Home/Home';\nimport { About } from './About/About';\nimport { Contact } from './Contact/Contact';\nimport { NavBar } from './NavBar/NavBar';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <NavBar />\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/about\" component={About} />\n          <Route path=\"/contact\" component={Contact} />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}